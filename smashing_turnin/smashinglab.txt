Smashing Lab
The setup for this lab took quite a while and had several things that needed to be troubleshooted.
1. The first step was to ensure that we were using the correct path for gcc. This had been done previously
through following the instructions posted to piazza. This was done through editing the profile file on
while logged into my seasnet machine. The following line was added to make the change:
PATH=/usr/local/cs/bin:$PATH
2. The second step was carried out fairly easily. The given configure command was run, and the three executables
were generated through using make and the given sets of tags. The mv function in terminal was used to rename 
each of these files. It should be noted at this point that the intended changes described in the patch were made to 
read_config in the source code of thttpd.c. That is, we shortened the buffer, set a fixed size length for the
get function, and made another function in libhttpd.c use memcpy instead of strcpy.
3. This step was somewhat difficult. When I initially tried to run the servers, the command to execute the file 
would cause the terminal to do nothing. The command would not finish executing. This same behaviour was seen with 
the curl commands when attempting to see a file put in the operating directory. However, this problem seemed
to go away when I was on campus. While a vpn was being used, I assume there was likely something blocking the
files from being sent. 
Crashing:
5. SP was crashed through passing in a file attack-sp.txt as the value for the "-C" tag. This was determined
through noticing that our patch affected the read_config funtion in thttpd.c. Upon looking at the source 
code, we can notice that the lines are broken down and read into the buffer. However, if invalid sequences
are found in the configuration file then the function will simply exit, and we wont crash the program. 
So, we must use one of the designated keywords, for simplicity I chose to use the 'debug' keyword. To determine
exactly how long the file should be, i examined thttpd-sp in GDB, and found that the length of the buffer pushed
was 112 bytes long. As a result, we need our line to be long enough to overflow this buffer. Through repetely
typing "debug" in the config file until it was more than 112 columns long, I was able to cause SP to crash. 
After doing so, I stepped through the assembly to find that the "get function" pulls in the text from our file
into the buffer. This later results in a segmentation fault from the following assembly:
0x40403d mov 0x68(%rsp),%rax //moves location of canary to rax
0x404042 xor %fs:0x28, %rax //compares moved value to canary
0x40404b jne 0x404150 //go to fail function if not equal
0x404150 callq 0x402410 <__stack_chk_fail@plt>
As the comments suggest these assembly instructions cause the segmentation fault because they check the stack,
which has been smashed at this point, for a canary. This canary defence is what is implemented by using the strong
stack protection. Technically the jne instruction is responsible for calling the fail function. But, as it is 
combination of these instructions that results in the checking of the canary all of the instructions are listed.
6. AS was crashed through passing the file attack-as.txt into the -C option for thttpd-as. As we have at this point
alreadly looked into the source code, we have a rough idea how our attack file should look. In looking thorugh the 
assembly in GDB we can notice that the code calls various sanitization functions that ensure the stack is not
impacted. This suggests that for these functions to fail, we will just have to alter the stack out of the bounds
that we are supposed to follow. This was confirmed by running a similar file to attack-sp.txt. This was again
a configuration file of a single line of "debug" keywords. This one suffices to simply exceed the length of the 
given buffer (100 as seen in the source code). The following assembly instructions are responsible for the 
segmentation fault:
0x00000000004f5b18 <__asan::ReportGenericError(unsigned long, unsigned long, unsigned long, unsigned long, bool,
 unsigned long, unsigned int, bool)+216>:    f3 48 a5 rep movsq %ds:(%rsi),%es:(%rdi)
This instruction is responsible for the error report that signals a segmentation fault. This function gets called because
we have address sanitization on. Address sanitizer will check that the addresses of interest have not been overwritten or changed so 
this functionality causes functions to periodically be called with user input to ensure that the stacks do not smash. Let us look
at some of the instructions that lead up to this segmentation fault aswell, as they are also responsible for the crash.
 Initial function for address sanitization :
0x52b46a <read_config+170>      callq  0x437920 <__interceptor_fgets(char*, SIZE_T, void*)>
checks the values at specific addresses:
0x437920 <__interceptor_fgets(char*, SIZE_T, void*)>    lea    0x37c771(%rip),%rax        # 0x7b4098 <_ZN6__asan20asan_init_is_runningE>
0x437927 <__interceptor_fgets(char*, SIZE_T, void*)+7>  cmpb   $0x0,(%rax) //if fails jumps to further comparisons
...
0x4374c7 <__interceptor_fgets(char*, SIZE_T, void*)+87>         cmp    $0x20,%rbx                                                                                      
0x4374cb <__interceptor_fgets(char*, SIZE_T, void*)+91>         ja     0x437538 <__interceptor_fgets(char*, SIZE_T, void*)+200> 
0x437538 <__interceptor_fgets(char*, SIZE_T, void*)+200>        cmp    $0x40,%rbx
0x43753c <__interceptor_fgets(char*, SIZE_T, void*)+204>        ja     0x4375c0 <__interceptor_fgets(char*, SIZE_T, void*)+336>
The last 4 instructions are pairs of comparisons and jumps that result in the error report occuring. These jumps are comparing values of the 
addresses accessed to the known posioned regions. If these comparisons indicate that the memory in the poison regions is being accessed, then
the program will move toward the error that we had seen. Comparing address values to the posioned region is the main implementation of address
sanitizers to ensure that these addresses are not being accessed, as they are not allocated for the buffer. This ensures that stacks cannot smash,
as the regions between them are now explicitly forbidded.
7. NO was a little more difficult to figure out, as we had to garuntee a segmentation fault without taking advantage 
of the fact that canaries or address sanitization was taking place. However, we are still able to crash the program
through corrupting the return address. This is done through the file attack-no.txt in the -C flag. This was done 
slightly differently, this time I rather used the "port" keyword. As it takes a value, i put a stream of 1's after it
and added them until the program crashed. This was the point at which the return address of the stack was overwritten. 
As the addresses of the stack are limited, adding the byte 0x31 in all values ensures that the resulting return address
is not a usable one and will garuntee a segmentation fault. 

8. I ran into some difficulties initially with getting out the assembly code for each of these compilation tags. This
was due to me trying to simply use gcc to create the files. When using make to generate the files with the -S tag,
a .o file was created. Since these files are functionally equivalent, we can rename it and have created the .s files.
When looking through the assembly code, we can compare the implementations of -fstack-protector-strong and -fsanitize=address
to prevent buffer overruns. They are described seperately below:
-fstack-protector-strong:
As mentioned previously, this form of stack protection is the canary defense. This strategy protects the stack through 
pushing a value determined at compilation to the stack, and periodically checking that it has not been changed. This is
exactly how the defense is implemented in the assembly. When the "get" function is called the function also does a check
of the canary before returning. This is done through the machine instructions described previously, but again shown below:
movq    40(%rsp), %rax
xorq    %fs:40, %rax
jne     .L511
addq    $56, %rsp //shrink stack
.L511:
call    __stack_chk_fail
Summarizing the insturctions, we can see that a designated position on the stack is pulled into registers (from 
context we know this is the intended location of the canary). This value is then compared to another register, 
which must presumably store our value of the canary. If the canary is found the function will shrink the stack and
return. But, if the values differ, we will jump to the  __stack_chk_fail function which causes our program to immediately
crash. This implements the canary defense for protecting the stack.
-fsanitize=address:
This tag implements address sanitization. This is a little more complicated. As we are not checking a single value. Rather,
there are many new sanitization and intercepting functions that are called. These functions move addresses that are being accessed
into registers and compare them to known values. This is checking if the buffer has accessed a poision zone of the stack. This zone is
a region which is forbidden to be written to, ensuring that the stacks cannot smash. If the program writes over these values, address sanitization 
functions will catch it and cause a segmentation fault. Again this is implemented through functions like __interceptor_fgets which will allow fgets to 
occur but ensure that it cannot access the poisoned zones of the stack. These functions are called with user input to ensure that the stack
is not overflown through a buffer. This is a little more labor intensive, but is extermely comprehensive in ensuring the stack is not overflown.

9.Creating an exploit proved to be quite challenging. The most difficult part of which was determining what code we sould be returning to to cause the file
"victim.txt" to be deleted. My initial thought was to inspect the source code and see if there were any helpful functions. This would be an approach of using
existing gadgets to get a task done. The hope here was that there would be some function in the source code that purges files of a specific type. At this point
I would put a pointer to the address of the desired txt file as an input and force the new function to execute with the victim file. However, in looking there 
were not any functions that appeared to be able to be exploited. This still left the option of calling portions of machine code that would be equivalent to a
remove function. But, as we will see this approach was simply impractical to attempt. My second idea was to write a simple c function designed to delete the victim
file and perform an obj dump on the executable. This file is included in the tar file (exploit.c and exploit.s). The goal here would to be a code injection attack. 
This means that our buffer overflow puts a convenient address at the location of the return address that will cause %rip to now point to some location at the stack 
that has also been overflown by our input. This location would contain the machine code for executing the remove function. The difficulty here was again practicality 
of the approach. The function itself was extremely complicated and had references to other functions that would not be garunteed to be on the stack of the machine we
are attacking. Additionally, we need to resturcture the entirety of the structure as it would not properly fit in the part of our buffer before the return address. 
This means that we would need to unroll the code and change all jump and call addresses to support a mostly linear walkthrough of the code. considering that including 
the 1000's of machine instructions referenced not immediately in these functions, this approach is also impractical. It should be noted that in this attempt, the bytes 
of the machine code must be put in a little endian order. This means that higher addresses get the higher order bytes. This brings us to the final idea used to create
an exploitation. This was inspired by the tutorial linked to in the project. This idea was to store a shell executable somewhere on the stack, find the known address,
and force the return address of read_config to contain this value. For the exploitation file I chose to use the port keyword in my configuration file. This is because
the port keyword demands a value associated with it of an indeterminate length. This allows us to put nonsensical bytes to a config file reader into our buffer without
the function exiting early. As a result the file took the form of "port=111111111111...1XXXXXXXX". In this case the x's represent the return address. Before the address
could be found I had to download and compile the code for getenvaddr to complete this task. After doing so, I ran the following commands:
export DEL="rm victim.txt"
./getenvaddr DEL ./src/thttpd-no -p 12909 -D -C exploit.txt
This produced the following response "DEL will be at 0xfffffffffffffffa". Now, we have both stored the shell command and have its address, we must now find the proper
offset at which we must insert the bytes of the address. This was done through both examining the assembly and confirming my assumptions with a file called offset.txt
In examining the assembly I noticed that the function started with 5 pushes to the stack and then created a buffer of 112 bytes. This suggested that the return address
would start after 152 bytes. I confirmed this by creating a configuration file that had a unique pattern of digits that was nonrepeating for every 8 possible sequential
bytes (it had 123..7891122...). I then instantiated the server with this file, and examined it through gdb. The last item popped before the return address contained the 
bytes corresponding to 90000001, which suggested that the next value being the return address must start at offset 153. This is consistent with what we noticed from 
the assembly code. We know that because we are on a little endian machine, this byte at 153 must be the least significant byte. As a result the last 8 bytes of our 
exploit file corresponded to "af ff ff ff ff ff ff ff". The exploit.txt file used is also included to illustrate the exploit done. Note, these files are included in the
tarball for clarity on the process of creating this exploit. They actual bytes for the exploitation are laid out in exploit_bytes.txt. Note that for this file the space between the port keyword and the return address are essentially garbage 1's used for simplicity. 
